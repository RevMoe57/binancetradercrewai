import os
import pandas as pd
import requests
from dotenv import load_dotenv
from binance.client import Client
from crewai import Crew, Agent, Task, Process
from binance.enums import ORDER_TYPE_MARKET, SIDE_BUY, SIDE_SELL
from langchain_ollama import OllamaLLM  # Utilisation correcte d'Ollama

# Charger les variables d'environnement
load_dotenv()
API_KEY = os.getenv("BINANCE_API_KEY")
API_SECRET = os.getenv("BINANCE_SECRET_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# Initialiser le client Binance
client = Client(API_KEY, API_SECRET)

# üî• Initialiser Ollama sans LiteLLM
ollama_llm = OllamaLLM(
    model="deepseek-r1:14b",  # Assure-toi que c'est bien le mod√®le disponible
    base_url="http://localhost:11434"
)

# ‚úÖ Fonction d'envoi d'alerte Telegram
def send_telegram_alert(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
    requests.post(url, data=data)

# ‚úÖ R√©cup√©rer toutes les paires de trading USDT
def get_all_usdt_pairs():
    exchange_info = client.get_exchange_info()
    usdt_pairs = [s['symbol'] for s in exchange_info['symbols'] if s['quoteAsset'] == 'USDT' and s['status'] == 'TRADING']
    return usdt_pairs

# ‚úÖ Fonction pour r√©cup√©rer les prix
def fetch_crypto_data(symbol, interval='1h', limit=50):
    klines = client.get_klines(symbol=symbol, interval=interval, limit=limit)
    df = pd.DataFrame(klines, columns=['time', 'open', 'high', 'low', 'close', 'volume', 
                                       'close_time', 'quote_volume', 'trades', 
                                       'taker_base', 'taker_quote', 'ignore'])
    df['close'] = df['close'].astype(float)
    return df[['time', 'close']]

# ‚úÖ Fonction pour analyser RSI et MACD
def analyze_crypto(symbol):
    df = fetch_crypto_data(symbol)
    df['rsi'] = df['close'].rolling(window=14).mean()
    df['macd'] = df['close'].ewm(span=12, adjust=False).mean() - df['close'].ewm(span=26, adjust=False).mean()
    
    last_rsi = df['rsi'].iloc[-1]
    last_macd = df['macd'].iloc[-1]
    
    if last_rsi < 30 and last_macd > 0:
        return "BUY"
    elif last_rsi > 70 and last_macd < 0:
        return "SELL"
    else:
        return "HOLD"

# ‚úÖ Fonction pour valider avec l'IA via Ollama
def ai_manager(symbol, action):
    prompt = f"""
    Symbol: {symbol}
    Action sugg√©r√©e: {action}
    
    Ton r√¥le est d'analyser cette action et de donner une r√©ponse finale.
    ‚ö†Ô∏è R√©ponds uniquement par BUY, SELL ou HOLD.
    - Si la tendance est haussi√®re et RSI < 30 ‚Üí BUY.
    - Si la tendance est baissi√®re et RSI > 70 ‚Üí SELL.
    - Sinon ‚Üí HOLD.
    
    Donne uniquement la r√©ponse finale sans explication.
    """
    decision = ollama_llm.invoke(prompt).strip().upper()
    
    # V√©rifier et filtrer la r√©ponse
    valid_responses = ["BUY", "SELL", "HOLD"]
    if decision not in valid_responses:
        decision = action  # S√©curiser si l'IA renvoie autre chose
    
    # Debug: Envoyer la d√©cision AI sur Telegram
    debug_message = f"üîç AI Decision Debug:\nSymbol: {symbol}\nAction Sugg√©r√©e: {action}\nR√©ponse AI: {decision}"
    print(debug_message)
    send_telegram_alert(debug_message)
    
    return decision

# ‚úÖ Fonction pour ex√©cuter les trades
def trade_crypto(symbol, action):
    final_action = ai_manager(symbol, action)
    if final_action == "BUY":
        client.create_order(symbol=symbol, side=SIDE_BUY, type=ORDER_TYPE_MARKET, quantity=0.001)
        send_telegram_alert(f"‚úÖ Achat de {symbol} ex√©cut√© apr√®s validation AI !")
    elif final_action == "SELL":
        client.create_order(symbol=symbol, side=SIDE_SELL, type=ORDER_TYPE_MARKET, quantity=0.001)
        send_telegram_alert(f"‚ùå Vente de {symbol} ex√©cut√©e apr√®s validation AI !")
    else:
        send_telegram_alert(f"‚è∏Ô∏è AI a annul√© le trade pour {symbol}")

# ‚úÖ Cr√©ation des agents CrewAI avec Ollama uniquement
fetcher = Agent(name="DataFetcher", role="R√©cup√©rateur de donn√©es", goal="R√©cup√©rer les prix des cryptos", backstory="Expert en extraction de donn√©es", llm=ollama_llm)
analyst = Agent(name="Analyst", role="Analyste de march√©", goal="Analyser les tendances", backstory="Sp√©cialiste en trading algorithmique", llm=ollama_llm)
manager = Agent(name="AI Manager", role="Validateur de trades", goal="V√©rifier les d√©cisions de trading avec l'IA", backstory="IA avanc√©e utilisant DeepSeek", llm=ollama_llm)
trader = Agent(name="Trader", role="Ex√©cuteur d'ordres", goal="Acheter et vendre les cryptos", backstory="Strat√®ge financier", llm=ollama_llm)

# ‚úÖ Lancer CrewAI avec Ollama uniquement
def run_trading():
    symbols = get_all_usdt_pairs()
    for symbol in symbols[:5]:  # Limiter √† 5 pour √©viter un trop grand nombre d'appels
        print(f"üöÄ Trading en cours pour {symbol}")
        crew = Crew(agents=[fetcher, analyst, manager, trader], tasks=[
            Task(description=f"Analyser et trader {symbol}", agent=manager, expected_output="BUY/SELL/HOLD"),
        ], process=Process.sequential)
        crew.kickoff()
    return "‚úÖ Trading termin√© sur toutes les cryptos."

if __name__ == "__main__":
    result = run_trading()
    print(result)
